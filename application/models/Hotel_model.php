
<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Hotel_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Room_category_model');
        $this->load->model('Reservation_model');
        $this->load->model('User_detail_model');
        
    }
    function get_min_price_filter()
    {
     
        $min_price_filter_query= "SELECT MIN(price) as min_htPrice FROM `sub_category`";
        return $this->db->query($min_price_filter_query)->row_array();
        
    }
    
    function get_max_price_filter()
    {
     
        $max_price_filter_query= "SELECT MAX(price) as max_htPrice FROM `sub_category` ";
        return $this->db->query($max_price_filter_query)->row_array();
        
    }


    /*
     * Get hotel by id
     */
    function get_hotel($id)
    {
        return $this->db->get_where('hotels',array('id'=>$id))->row_array();
    }
function getSubcate_name($id)
    {
        return $this->db->get_where('sub_category',array('id'=>$id))->row_array();
    }

function get_bankdetails($id)
    {
        // return $this->db->get_where('bank_accounts',array('hotel_id'=>$id))->row_array();
         $que="SELECT * FROM `bank_accounts` where hotel_id ='".$id."'";
         return $this->db->query($que)->row_array();
    }
    function get_latlong($id)
    {
        
         $que="SELECT * FROM `maps` where hotel_id ='".$id."'";
         return $this->db->query($que)->row_array();
    }
    function get_policies($id)
    {
        
         $que="SELECT * FROM `policies` where hotel_id ='".$id."'";
         return $this->db->query($que)->row_array();
    }
    function get_cancellation_policies($id)
    {
        
         $que="SELECT * FROM `cancellation_policies` where hotel_id ='".$id."'";
         return $this->db->query($que)->row_array();
    }
    function get_pay_at_hotel($id)
    {
        
         $que="SELECT * FROM `pay_at_hotel` where hotel_id ='".$id."'";
         return $this->db->query($que)->row_array();
    }
    function get_taxes($id)
    {
        
         $que="SELECT * FROM `taxes` where hotel_id ='".$id."'";
         return $this->db->query($que)->result_array();
    }
     function get_categories($id)
    {
        return $this->db->get_where('room_categories',array('hotel_id'=>$id))->result_array();
    }
        
    /*
     * Get all hotels
     */
    // function get_all_hotels($id=null)
    // {
    //     if($id==null){
    //     $this->db->order_by('id', 'asc');
    //     return $this->db->get('hotels')->result_array();
    //     }else{
    //         $this->db->where('vendor_name',$id)->order_by('id', 'asc');
    //     return $this->db->get('hotels')->result_array();
    //     }
    // }

    function get_all_hotels($id=null)
    {
        if($id==null){
            $this->db->select('hotels.*,login_users.username as username')
                ->join('login_users','login_users.id=hotels.vendor_name')
                 ->order_by('id', 'asc');
            return $this->db->get('hotels')->result_array();
            }else{
                $this->db->select('hotels.*,login_users.username as username')
                ->join('login_users','login_users.id=hotels.vendor_name')
                ->where('vendor_name',$id)
                ->order_by('id', 'asc');
                // $this->db->where('vendor_name',$id)->order_by('id', 'asc');
            return $this->db->get('hotels')->result_array();
            }

    }
    // function get_all_hotels($id=null)
    // {
    //     $this->db->select('hotels.*')
                
    //              ->order_by('id', 'asc');
    //         return $this->db->get('hotels')->result_array();
    // }
        
    /*
     * function to add new hotel
     */
    function add_hotel($params)
    {
        $this->db->insert('hotels',$params);
        return $this->db->insert_id();
    }
     function add_bank_account($params)
    {
        $this->db->insert('bank_accounts',$params);
        return $this->db->insert_id();
    }
     function add_map($params)
    {
        $this->db->insert('maps',$params);
        return $this->db->insert_id();
    }
    //  function add_gallery($params)
    // {
    //     $this->db->insert('gallery',$params);
    //     return $this->db->insert_id();
    //     // $gal = explode(',',$params['gallery']);
    //     // if(isset($params['category_id']) && $params['category_id']!= '' ){
    //     //     foreach ($gal as $key) {
    //     //         $par=array('hotel_id' =>$params['hotel_id'],'category_id'=> $params['category_id'] ,'gallery' =>$key );
    //     //         $this->db->insert('gallery',$par); 
    //     //     }

    //     // }else{
    //     //     foreach ($gal as $key) {
    //     //         $par=array('hotel_id' =>$params['hotel_id'] ,'gallery' =>$key );
    //     //         $this->db->insert('gallery',$par); 
    //     //     }
    //     // }
        
    // }
    function add_gallery($params)
    {
        // $this->db->insert('gallery',$params);
        // return $this->db->insert_id();
        $gal = explode(',',$params['gallery']);
        if(isset($params['category_id']) && $params['category_id']!= '' ){
            foreach ($gal as $key) {
                $par=array('hotel_id' =>$params['hotel_id'],'category_id'=> $params['category_id'] ,'gallery' =>$key );
                $this->db->insert('gallery',$par); 
            }

        }else{
            foreach ($gal as $key) {
                $par=array('hotel_id' =>$params['hotel_id'] ,'gallery' =>$key );
                $this->db->insert('gallery',$par); 
            }
        }
        
    }
    function add_sub_gallery($params)
    {
         $this->db->insert('gallery',$params);
        return $this->db->insert_id();
    }

     function add_roompics($params)
    
    {
        $this->db->insert('room_pics',$params);
        return $this->db->insert_id();
    }
       function add_business($params)
    {
        $this->db->insert('business_profiles',$params);
        return $this->db->insert_id();
    }
     function add_policy($params)
    {
        $this->db->insert('policies',$params);
        return $this->db->insert_id();
    }
     function add_cancellation_policy($params)
    {
        $this->db->insert('cancellation_policies',$params);
        return $this->db->insert_id();
    }
     function add_option($params)
    {
        $this->db->insert('pay_at_hotel',$params);
        return $this->db->insert_id();
    }
     function add_tax($params)
    {
        $this->db->insert('taxes',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update hotel
     */
    function update_hotel($id,$params)
    {
        // var_dump($params);die;
        $this->db->where('id',$id);
        return $this->db->update('hotels',$params);
    }
    

     function update_bank_account($id,$params)
    {
        $this->db->where('hotel_id',$id);
        return $this->db->update('bank_accounts',$params);
    }
    
             function update_map($id,$map)
    {
        $this->db->where('hotel_id',$id);
        return $this->db->update('maps',$map);
    }
    

    
             function update_tax($tax)
    {
           $this->db->where('id',$tax['id']);
               $q = $this->db->get('taxes');

               if ( $q->num_rows() > 0 ) 
               {
                  $this->db->where('id',$tax['id']);
                  $this->db->update('taxes',$tax);
               } else {
                  $this->db->set('id');
                  $this->db->insert('taxes',$tax);
               }
    }
    
    
    
    //          function update_gallery($id,$gallery)
    // {
    //     $this->db->where('hotel_id',$id);
    //     return $this->db->update('gallery',$gallery);
    // }
    
             function update_policy($id,$policy)
    {
        $this->db->where('hotel_id',$id);
        return $this->db->update('policies',$policy);
    }
    
             function update_cancellation_policy($id,$cancellation_policy)
    {
        $this->db->where('hotel_id',$id);
        return $this->db->update('cancellation_policies',$cancellation_policy);
    }
    
             function update_option($id,$option)
    {
        $this->db->where('hotel_id',$id);
        return $this->db->update('pay_at_hotel',$option);
    }
    
    /*
     * function to delete hotel
     */
    function delete_hotel($id)
    {
        return $this->db->delete('hotels',array('id'=>$id));
    }

    function get_hotels_location($params)
	  {        
        $query1= "select *,min(min_price) from (
        
        select hotels.*, sub_category.price as min_price,sub_category.base_price as base_price,'' as gall from hotels JOIN
        (select  DISTINCT(hotels.id) from hotels JOIN
        (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        inventory on inventory.hotel_id = hotels.id
        WHERE (date>='".$params['start']."' AND date<'".$params['end']."') and inventory.blocked=0
        and hotels.location = '". $params['location']."' 
        GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        INNER join sub_category on sub_category.hotel_id = min_rooms.id
        WHERE sub_category.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        join sub_category on sub_category.hotel_id = hotels.id
        GROUP by sub_category.hotel_id) as res GROUP by id
        ";
      //  echo $query1;
//         $query1="select *,min(min_price) from (
//         select hotels.*, room_categories.price as min_price,room_categories.baseprice as base_price from hotels JOIN
//         (select  DISTINCT(hotels.id) from hotels JOIN
//         (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
//         inventory on inventory.hotel_id = hotels.id
//         WHERE (date>='2018-07-31' AND date<'2018-08-01') 
//         and hotels.location = 'Hyderabad' 
//         GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
//         WHERE min_cat.availability >= 3)min_rooms on min_rooms.id = hotels.id
//         INNER join room_categories on room_categories.hotel_id = min_rooms.id
//         WHERE room_categories.capacity * 3 >= 5 )final on final.id= hotels.id
//         join room_categories on room_categories.hotel_id = hotels.id
//         GROUP by room_categories.hotel_id
//         UNION DISTINCT
//         select hotels.*, sub_category.price as min_price,sub_category.base_price as base_price from hotels JOIN
//         (select  DISTINCT(hotels.id) from hotels JOIN
//         (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
//         inventory on inventory.hotel_id = hotels.id
//         WHERE (date>='2018-07-31' AND date<'2018-08-01') 
//         and hotels.location = 'Hyderabad' 
//         GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
//         WHERE min_cat.availability >= 3)min_rooms on min_rooms.id = hotels.id
//         INNER join sub_category on sub_category.hotel_id = min_rooms.id
//         WHERE sub_category.capacity * 3 >= 5)final on final.id= hotels.id
//         join sub_category on sub_category.hotel_id = hotels.id
//         GROUP by sub_category.hotel_id) as res GROUP by id
// ";
     return $this->db->query($query1)->result_array();
        // print_r( $result);
       // var_dump( $this->db->query($query1));
       
          // return $this->db->query($query1)->result_array(); 
    }
    
    
		  function get_hotels($params)
    {
	
		$q="SELECT hotels.hotel_name,hotels.location,hotels.hotel_grade,hotels.amenities,room_categories.id as category_id,room_categories.hotel_id,room_categories.category_name,room_categories.no_of_rooms FROM hotels INNER JOIN room_categories ON room_categories.hotel_id=hotels.id where location='".$params['location']."'";
		
		return $this->db->query($q)->result_array();
		
			
	}
    function get_hotel_by_id($params)
     {
         $que="SELECT * FROM hotels INNER JOIN room_categories ON room_categories.hotel_id=hotels.id where hotels.id='".$params['id']."'";
         return $this->db->query($que)->result_array();
     }
       function getHotels($params)
     {
         $que="SELECT * FROM hotels where hotels.id='".$params['id']."'";
         return $this->db->query($que)->result_array();
     }
//      function getCategories($params)
//      {
//          $que="SELECT category_name as name,price,amenities,id as category_id,hotel_id,baseprice as base_price FROM `room_categories`
// WHERE hotel_id='".$params['id']."'";
//          return $this->db->query($que)->result_array();
//      }
//      function getSubCategories($params)
//      {
//          $que="SELECT sub_name as name,price,amenities,id as sub_category_id,category_id as category_id,hotel_id,base_price as base_price FROM `sub_category`
// WHERE hotel_id='".$params['id']."'";
//          return $this->db->query($que)->result_array();
//      }

     function getCategories($params)
     {
         $que="SELECT category_name,price,amenities,id as category_id,hotel_id,baseprice as base_price, double_price, extra_bed_price FROM `room_categories`
WHERE hotel_id='".$params['id']."'";
         return $this->db->query($que)->result_array();
     }
     function getSubCategories($params)
     {
         $que="SELECT sub_name,category_name,sc.price,sc.double_price, sc.extra_bed_price,sc.amenities,sc.id as sub_category_id,sc.category_id as category_id,sc.hotel_id,sc.base_price as base_price FROM `sub_category` sc inner join room_categories rc on rc.id = sc.category_id
WHERE sc.hotel_id='".$params['id']."'";
         return $this->db->query($que)->result_array();
     }
      function getSubcate($id,$hotel_id)
     {
         $que="SELECT sub_name as name,double_price,cancellation_policy,extra_bed_price,price,amenities,id as sub_category_id,category_id as category_id,hotel_id,base_price as base_price FROM `sub_category`
WHERE hotel_id='".$hotel_id."' AND category_id=' ".$id."'";
         return $this->db->query($que)->result_array();
     }
      function getsubcost($id)
     {
         $que="SELECT sub_name as name,price,cancellation_policy,double_price,extra_bed_price,amenities,id as sub_category_id,category_id as category_id,hotel_id,base_price as base_price FROM `sub_category`
WHERE id=' ".$id."'";
         return $this->db->query($que)->row_array();
     }
          function getUserratings($params)
     {
         $que="SELECT ratings,review FROM `user_ratings`
WHERE hotel_id='".$params['id']."'";
         return $this->db->query($que)->result_array();
     }
      function getCoordinates($params)
     {
         $que="SELECT latitude,longitude FROM `maps`
WHERE hotel_id='".$params['id']."'";
         return $this->db->query($que)->result_array();
     }
         function get_gallery($id)
    {
        
         $que="SELECT * FROM `room_pics` where hotel_id ='".$id."'";
         return $this->db->query($que)->result_array();
    }
    function get_common_pics($id)
    {
        
        //  $que="SELECT * FROM `gallery` where hotel_id ='".$id."' AND category_id IS NULL AND sub_category_id IS NULL ";
        //  return $this->db->query($que)->result_array();
        $que="SELECT * FROM `gallery` where hotel_id ='".$id."'and category_id is null and sub_category_id is null";
        return $this->db->query($que)->result_array();
    }

    
    function get_hotel_options($id)
    {
        
        //  $que="SELECT * FROM `gallery` where hotel_id ='".$id."' AND category_id IS NULL AND sub_category_id IS NULL ";
        //  return $this->db->query($que)->result_array();
        $que="SELECT * FROM `pay_at_hotel` where hotel_id=$id";
        return $this->db->query($que)->result_array();
    }

     function gethtls($id=NULL)
     {
         // $que="SELECT COUNT(hotel_name) FROM hotels";
         // return $this->db->query($que)->row_array();
        if($id==NULL)
        {
         $que="SELECT COUNT(*) FROM hotels h,login_users l WHERE h.vendor_name=l.id ";
     }
     else
     {

          $que="SELECT COUNT(*) FROM hotels h,login_users l WHERE h.vendor_name=l.id AND h.vendor_name=' ".$id." ' ";
     }
     return $this->db->query($que)->row_array();
     }

      function total_reservations($id=NULL)
     {
        if($id==NULL)
        {
         $que="SELECT COUNT(*) FROM reservations";
     }
     else
     {
          $que="SELECT count(*) FROM reservations r, hotels h WHERE r.hotel_id=h.id AND h.vendor_name=' ".$id." ' ";
     }
     return $this->db->query($que)->row_array();
     }
     function total_reservations_agent($id)
     {
        $query="SELECT count(*) FROM reservations WHERE user_id='$id' ";
        return $this->db->query($query)->row_array();
     }
      function total_users()
     {
         // $que="SELECT COUNT(user_type) FROM login_users where user_type = '3'";
         // return $this->db->query($que)->row_array();
        $que="SELECT COUNT(*) FROM login_users l,user_details u where l.id=u.login_id AND user_type = '3'";
         return $this->db->query($que)->row_array();
     }

       function total_agents()
     {
         $que="SELECT COUNT(*) FROM user_details u,login_users l where l.id = u.login_id AND l.user_type='4' ";
         return $this->db->query($que)->row_array();
     }

       function daily_data($start,$end)
     {
         $que="SELECT COUNT(created_at)
            FROM `reservations`
            WHERE (created_at BETWEEN '".$start."' AND '".$end."')";
                     return $this->db->query($que)->result_array();
     }
     function daily_agent($start,$id)
     {
         $que="SELECT COUNT(*)
            FROM reservations WHERE user_id= '$id ' AND DATE(created_at)= '$start '";
            return $this->db->query($que)->row_array();

     }
      function daily($start,$id=NULL)
     {
        if($id==NULL)
        {
         $que="SELECT COUNT(*)
            FROM `reservations`
            WHERE DATE(created_at)= '$start '";
        }else
        {
             $que="SELECT COUNT(*)
            FROM reservations r,hotels h 
            WHERE r.hotel_id=h.id AND h.vendor_name= '$id ' AND DATE(r.created_at)= '$start '";

        }
                     return $this->db->query($que)->row_array();
     }
     function get_hotels_ajaxSearch($params)
      {
            
        // $query1="

        //  SELECT *  FROM hotels Hotel_details
            
        //  LEFT  JOIN (SELECT hotel_id,hotels.total_rooms-sum(no_of_rooms) as available_room FROM `reservations`
        // JOIN hotels ON hotels.id = reservations.hotel_id
        // where 
        // hotels.city = '".$params['location']."' AND(
        // (cast(check_in as date) BETWEEN '".$params['start']."' AND '".$params['end']."')
        //  OR                           
        // (cast(check_out as date) BETWEEN '".$params['start']."' AND '".$params['end']."'))
        
        // GROUP BY hotel_id) reservations_inform
        //  ON Hotel_details.id = reservations_inform.hotel_id
        //  WHERE (Hotel_details.city = '".$params['location']."')
        //  AND ((CASE WHEN reservations_inform.available_room
        //    IS NULL THEN Hotel_details.total_rooms 
        //    ELSE reservations_inform.available_room
        //    END   ) >= '".$params['rooms']."')
        //  ";
        if($params['sort']=="")
        {

         $sort="";
        }
         elseif($params['sort']==0)
        {
            $query1= "select *,min(min_price),min(discount),count(reservations.id) from (select hotels.*, sub_category.price as min_price,sub_category.discount as discount,sub_category.base_price as base_price,'' as gall,'' as options from hotels JOIN
        (select  DISTINCT(hotels.id) from hotels JOIN
        (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        inventory on inventory.hotel_id = hotels.id
        WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0
        and hotels.location = '". $params['location']."'
        GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        INNER join sub_category on sub_category.hotel_id = min_rooms.id
        WHERE sub_category.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        join sub_category on sub_category.hotel_id = hotels.id where (sub_category.price BETWEEN ".$params['min']."  AND ".$params['max'].")
        GROUP by sub_category.hotel_id)res  LEFT JOIN  reservations on hotel_id=res.id GROUP by res.id   ORDER BY count(reservations.id) DESC"
        ;
        

     
        $this->db->query($query1)->result_array();
          return $this->db->query($query1)->result_array(); 
        }
        elseif($params['sort']==1)
        {
            $sort="ORDER BY min_price DESC";
        }
        elseif($params['sort']==2)
        {
            $sort="ORDER BY min_price ASC";
        }
        else
        {
            $sort=" ORDER BY (100-(min_price/base_price)*100) DESC ";
        }
        
        // $query1= "select *,min(min_price),min(discount)from (
        // select hotels.*, room_categories.price as min_price,room_categories.baseprice as base_price from hotels JOIN
        // $query1= "select *,min(min_price),min(discount) from (
        //     select hotels.*, room_categories.price as min_price,room_categories.discount as discount ,room_categories.baseprice as base_price from hotels JOIN


        // (select  DISTINCT(hotels.id) from hotels JOIN
        // (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        // inventory on inventory.hotel_id = hotels.id
        // WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0
        // and hotels.location = '". $params['location']."' 
        // GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        // WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        // INNER join room_categories on room_categories.hotel_id = min_rooms.id
        // WHERE room_categories.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        // join room_categories on room_categories.hotel_id = hotels.id where hotels.hotel_grade IN ( " .$params['rating']. " ) AND (room_categories.price BETWEEN ".$params['min']."   AND ".$params['max'].")
        // GROUP by room_categories.hotel_id
        // UNION DISTINCT
        // select hotels.*, sub_category.price as min_price,sub_category.discount as discount,sub_category.base_price as base_price from hotels JOIN
        // (select  DISTINCT(hotels.id) from hotels JOIN
        // (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id, max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        // inventory on inventory.hotel_id = hotels.id
        // WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0 
        // and hotels.location = '". $params['location']."'
        // GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        // WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        // INNER join sub_category on sub_category.hotel_id = min_rooms.id
        // WHERE sub_category.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        // join sub_category on sub_category.hotel_id = hotels.id where hotels.hotel_grade IN ( " .$params['rating']. " ) AND (sub_category.price BETWEEN ".$params['min']."   AND ".$params['max'].")
        // GROUP by sub_category.hotel_id) res GROUP by id ".$sort."
        
        // ";
        $query1="select *,min(min_price),min(discount) from (select hotels.*, sub_category.price as min_price,sub_category.discount as discount,sub_category.base_price as base_price,'' as gall,'' as options from hotels JOIN
        (select  DISTINCT(hotels.id) from hotels JOIN
        (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id, max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        inventory on inventory.hotel_id = hotels.id
        WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0 
        and hotels.location = '". $params['location']."'
        GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        INNER join sub_category on sub_category.hotel_id = min_rooms.id
        WHERE sub_category.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        join sub_category on sub_category.hotel_id = hotels.id where hotels.hotel_grade IN ( " .$params['rating']. " ) AND (sub_category.price BETWEEN ".$params['min']."   AND ".$params['max'].")
        GROUP by sub_category.hotel_id) res GROUP by id ".$sort;

        $this->db->query($query1)->result_array();
          return $this->db->query($query1)->result_array(); 
    }
     function get_hotels_ajax($params)
      {
            
        // $query1="

        //  SELECT *  FROM hotels Hotel_details
            
        //  LEFT  JOIN (SELECT hotel_id,hotels.total_rooms-sum(no_of_rooms) as available_room FROM `reservations`
        // JOIN hotels ON hotels.id = reservations.hotel_id
        // where 
        // hotels.city = '".$params['location']."' AND(
        // (cast(check_in as date) BETWEEN '".$params['start']."' AND '".$params['end']."')
        //  OR                           
        // (cast(check_out as date) BETWEEN '".$params['start']."' AND '".$params['end']."'))
        
        // GROUP BY hotel_id) reservations_inform
        //  ON Hotel_details.id = reservations_inform.hotel_id
        //  WHERE (Hotel_details.city = '".$params['location']."')
        //  AND ((CASE WHEN reservations_inform.available_room
        //    IS NULL THEN Hotel_details.total_rooms 
        //    ELSE reservations_inform.available_room
        //    END   ) >= '".$params['rooms']."')
        //  ";
        if($params['sort']=="")
        {

         $sort="";
        }
        elseif($params['sort']==0)
        {
             $query1= "select *,min(min_price),min(discount),count(reservations.id) from (select hotels.*, sub_category.price as min_price,sub_category.discount as discount,sub_category.base_price as base_price, '' as gall,'' as options from hotels JOIN
        (select  DISTINCT(hotels.id) from hotels JOIN
        (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        inventory on inventory.hotel_id = hotels.id
        WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0
        and hotels.location = '". $params['location']."'
        GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        INNER join sub_category on sub_category.hotel_id = min_rooms.id
        WHERE sub_category.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        join sub_category on sub_category.hotel_id = hotels.id where (sub_category.price BETWEEN ".$params['min']."  AND ".$params['max'].")
        GROUP by sub_category.hotel_id)res  LEFT JOIN  reservations on hotel_id=res.id GROUP by res.id   ORDER BY count(reservations.id) DESC"
        ;
        


        $this->db->query($query1)->result_array();
          return $this->db->query($query1)->result_array(); 
        }
        elseif($params['sort']==1)
        {
            $sort="ORDER BY (min_price) DESC";
        }
        elseif($params['sort']==2)
        {
            $sort="ORDER BY (min_price) ASC";
        }
        else
        {
            $sort=" ORDER BY (100-(min_price/base_price)*100) DESC";
        }
        

        // $query1= "select *,min(min_price),min(discount) from (
        // select hotels.*, room_categories.price as min_price,room_categories.discount as discount,room_categories.baseprice as base_price from hotels JOIN
        
        // (select  DISTINCT(hotels.id) from hotels JOIN
        // (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        // inventory on inventory.hotel_id = hotels.id
        // WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0
        // and hotels.location = '". $params['location']."'
        // GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        // WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        // INNER join room_categories on room_categories.hotel_id = min_rooms.id
        // WHERE room_categories.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        // join room_categories on room_categories.hotel_id = hotels.id where (room_categories.price BETWEEN ".$params['min']."  AND ".$params['max'].")
        // GROUP by room_categories.hotel_id
        // UNION DISTINCT
        // select hotels.*, sub_category.price as min_price,sub_category.discount as discount,sub_category.base_price as base_price from hotels JOIN
        // (select  DISTINCT(hotels.id) from hotels JOIN
        // (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        // inventory on inventory.hotel_id = hotels.id
        // WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0
        // and hotels.location = '". $params['location']."'
        // GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        // WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        // INNER join sub_category on sub_category.hotel_id = min_rooms.id
        // WHERE sub_category.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        // join sub_category on sub_category.hotel_id = hotels.id where (sub_category.price BETWEEN ".$params['min']."  AND ".$params['max'].")
        // GROUP by sub_category.hotel_id)res GROUP by id ".$sort."
        // ";
          $query1= "select *,min(min_price),min(discount) from (select hotels.*, sub_category.price as min_price,sub_category.discount as discount,sub_category.base_price as base_price, '' as gall,'' as options from hotels JOIN
        (select  DISTINCT(hotels.id) from hotels JOIN
        (select DISTINCT(hotels.id) from hotels JOIN(SELECT hotels.id,max(inventory.total_available - inventory.booked) as availability,inventory.category_id,inventory.date FROM hotels INNER JOIN
        inventory on inventory.hotel_id = hotels.id
        WHERE (date>='".$params['start']."' AND date<='".$params['end']."') and inventory.blocked=0
        and hotels.location = '". $params['location']."'
        GROUP by inventory.category_id)min_cat on min_cat.id = hotels.id
        WHERE min_cat.availability >= '". $params['rooms']."')min_rooms on min_rooms.id = hotels.id
        INNER join sub_category on sub_category.hotel_id = min_rooms.id
        WHERE sub_category.capacity * ".$params['rooms'].">= '". $params['guests']."')final on final.id= hotels.id
        join sub_category on sub_category.hotel_id = hotels.id where (sub_category.price BETWEEN ".$params['min']."  AND ".$params['max'].")
        GROUP by sub_category.hotel_id)res GROUP by id  ". $sort ." "
        ;
        


        $this->db->query($query1)->result_array();
          return $this->db->query($query1)->result_array(); 
    }

    function get_room_availability($params){
        // var_dump($params);
       
        $datearray = explode(' - ',$params['date']);
        // var_dump($datearray);die;
        $startdate = $datearray[0];
        $enddate = $datearray[1];    
        if(array_key_exists("sub_category_id",$params)){
            $query = "SELECT min(total_available - booked) as availability FROM `inventory`  WHERE (date>='".$startdate."' AND date<='".$enddate."') AND blocked=0 AND (total_available - booked) >= '".$params['rooms']."' AND capacity * ".$params['rooms']." >= '".$params['adults']."' and hotel_id = '".$params['hotel_id']."' AND category_id = '".$params['category_id']."' and sub_category_id = '".$params['sub_category_id']."'";
        }else{
            $query = "SELECT min(total_available - booked) as availability FROM `inventory`  WHERE (date>='".$startdate."' AND date<='".$enddate."') AND blocked=0 AND (total_available - booked) >= '".$params['rooms']."' AND capacity * ".$params['rooms'].">= '".$params['adults']."'  and hotel_id = '".$params['hotel_id']."' AND category_id = '".$params['category_id']."'";
        }
            
        $res = $this->db->query($query)->row_array();
        // return $res;
        if($res['availability'] == 0 ){
            return "false";
        }else{
            return "true";
        }
    }
    function get_category_pic($id,$category_id)
    {
       // return $this->db->get_where('gallery',array('hotel_id'=>$id,'category_id'=>$category_id ,sub_category_id INULL))->row_array();
        $sql="SELECT * FROM gallery where hotel_id='$id' AND category_id='$category_id' AND sub_category_id IS NULL ";
        return $this->db->query($sql)->row_array();
    }
    function get_sub_pic($id,$category_id,$sub_category_id)
    {
         $sql="SELECT * FROM gallery where hotel_id='$id' AND category_id='$category_id' AND sub_category_id='$sub_category_id' ";
        return $this->db->query($sql)->row_array();
    }
     function update_room_gallery($params)
    {
        $sql="UPDATE gallery SET gallery='".$params['gallery']. "' WHERE hotel_id='".$params['hotel_id']."' AND category_id='".$params['category_id']." ' ";
      return   $this->db->query($sql);
    }
       function update_sub_gallery($params)
    {
        $sql="UPDATE gallery SET gallery='".$params['gallery']. "' WHERE hotel_id='".$params['hotel_id']."'  AND sub_category_id='".$params['sub_category_id']." ' ";
      return   $this->db->query($sql);
    }
    function remove_picture($id)
    {
        $sql="DELETE FROM gallery where id='$id' ";
        return $this->db->query($sql);
    }
     function get_room_availability_sample($params){
        // var_dump($params);
       
        $datearray = explode(' - ',$params['date']);
        // var_dump($datearray);die;
        $startdate = $datearray[0];
        $enddate = $datearray[1]; 
         $begin = new DateTime($startdate);
$end = new DateTime($enddate);

$interval = DateInterval::createFromDateString('1 day');
$period = new DatePeriod($begin, $interval, $end);
$i=1;
$j=1;
foreach ($period as $dt) {
    $date=$dt->format("Y-m-d");
       
        if(array_key_exists("sub_category_id",$params)){
            // $query = "SELECT min(total_available - booked) as availability FROM `inventory`  WHERE (date>='".$startdate."' AND date<'".$enddate."') AND blocked=0 AND (total_available - booked) >= '".$params['rooms']."' AND capacity >= '".$params['adults']."' and hotel_id = '".$params['hotel_id']."' AND category_id = '".$params['category_id']."' and sub_category_id = '".$params['sub_category_id']."'";
            $query = "SELECT (total_available - booked) as availability FROM `inventory`  WHERE date='$date' AND blocked=0 AND (total_available - booked) >= '".$params['rooms']."' AND capacity*'".$params['rooms']."' >= '".$params['adults']."' and hotel_id = '".$params['hotel_id']."' AND category_id = '".$params['category_id']."' and sub_category_id = '".$params['sub_category_id']."'";
        }else{
            // $query = "SELECT min(total_available - booked) as availability FROM `inventory`  WHERE date='$date' AND blocked=0 AND (total_available - booked) >= '".$params['rooms']."' AND capacity >= '".$params['adults']."' and hotel_id = '".$params['hotel_id']."' AND category_id = '".$params['category_id']."'";
             $query = "SELECT (total_available - booked) as availability FROM `inventory`  WHERE date='$date' AND blocked=0 AND (total_available - booked) >= '".$params['rooms']."' AND capacity*'".$params['rooms']."' >= '".$params['adults']."' and hotel_id = '".$params['hotel_id']."' AND category_id = '".$params['category_id']."'";
            

        }
    
        $res = $this->db->query($query)->row_array();
        if(!empty($res) && $res['availability']!=0)
        {
            $j++;
        }
        $i++;
    }
        // 
    if($i!=$j){
            return "false";
        }else{
            return "true";
        }
    }
    function popular_areas($location)
    {
       $this->db->select('COUNT(area) , area');
$this->db->from('hotels');
$this->db->where('location', $location);
$this->db->group_by('area');
$this->db->order_by('count(area)','DESC');
$this->db->limit(5);
$query=$this->db->get();
return $query->result_array();
//         SELECT area, COUNT(area) 
// FROM hotels
// GROUP BY area
// HAVING COUNT(area) >= 1 ORDER BY count(area) DESC LIMIT 0,2
    }

    function get_top_hotel()
    {   
        $this->db->order_by("hotel_name", "asc");
        $query = $this->db->get_where('hotels',array('top_hotel' => 'yes'))->result_array();
        return $query;

    }

}
