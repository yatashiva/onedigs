<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Inventory_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }


    function get_all_inventory_hotel_category($hotel_id)
    {

        $this->db->where('hotle_id',$hotel_id)
        ->order_by('id', 'desc');
        return $this->db->get('room_categories')->result_array();
    }


   function add_update_inventory($params){
       if(array_key_exists('sub_category_id', $params) == true){
        $query= "select * from inventory where date='".$params['date']."' and category_id='".$params['category_id']."' and sub_category_id='".$params['sub_category_id']."'";
        
        $id= $this->db->query($query)->row_array();
       }else{
        $query= "select * from inventory where date='".$params['date']."' and category_id='".$params['category_id']."' and sub_category_id IS NULL ";
        $id= $this->db->query($query)->row_array(); 
       }
    //    echo $this->db->last_query();
    //    var_dump($id);
        if($id['id']==null){
            $params['final_available']= $params['availability']-$params['booked'];
            $this->db->insert('inventory',$params);
            return $this->db->insert_id();
        }elseif($id ['id']!=null){
            if($id['blocked']==0){
                if($id['custom_availability']!='' || $id['custom_availability']!= null ){
                    $params['final_available']= $id['custom_availability']-$params['booked'];                
                    $this->db->where('id',$id['id']);
                    return $this->db->update('inventory',$params);
                }else{
                     $params['final_available']= $id['availability']-$params['booked'];                
                        $this->db->where('id',$id['id']);
                        return $this->db->update('inventory',$params);
                }


            }elseif($id['blocked']== 1){
                $params['final_available']= 0;
                $this->db->where('id',$id['id']);
                return $this->db->update('inventory',$params);
            }
        }

    }

    public function inventory(){

        $date=strtotime(date('Y-m-d'));
       for($i=0;$i<30;$i++) {
          $dates[] = date('Y-m-d',strtotime('+'.$i.'days',$date));
       }

       $hotels = $this->Hotel_model->get_all_hotels();
       foreach($hotels as $hot){
     $categories= $this->Room_category_model->get_room_categories_by_hotel_id($hot['id']);
     foreach($categories as $cat){
        $aval = 0;
        $subcateories = $this->Room_category_model->get_subcategories_by_category($cat['id']);
                    if($subcateories !=''){
                        
                        foreach($subcateories as $scat){
                        $aval += $scat['num_of_rooms'];

                        foreach($dates as $d){        
                            $avalbydate = $this->Reservation_model->get_avaliability_by_date_sub($cat['id'],$d);
                            // var_dump($avalbydate);die;
                            if($avalbydate!=null){
                            $params = array(
                                
                                'hotel_id' => $avalbydate['hotel_id'],
                                'category_id' =>  $avalbydate['category_id'],
                                'sub_category_id' =>  $avalbydate['sub_category_id'],
                                'date' => $d,
                                'capacity'=> $avalbydate['capacity'],
                                'availability' => $avalbydate['availability'],
                                'base_price' => $scat['base_price'],
                                'original_price' => $scat['price'],
                                'booked' => $avalbydate['booked'],
                    
                            );
                            
                            // $id=$this->Inventory_model->add_update_inventory($params);
                        }elseif($avalbydate==null){
                            $params = array(
                                
                                'hotel_id' => $hot['id'],
                                'category_id' =>  $scat['category_id'],
                                'sub_category_id' =>  $scat['id'],
                                'date' => $d,
                                'capacity'=> $scat['capacity'],
                                'availability' => $scat['num_of_rooms'],
                                'base_price' => $scat['base_price'],
                                'original_price' => $scat['price'],
                                'booked' => 0,
                            );
                            
                        }
                        // var_dump($params);die;
                        $id=$this->Inventory_model->add_update_inventory($params);

                    }
                }
            }
       foreach($dates as $d){        
        $avalbydate = $this->Reservation_model->get_avaliability_by_date($cat['id'],$d);
        // var_dump($avalbydate);die;
        if($avalbydate!=null && $avalbydate['sub_category_id'] == '0' ){
        $params = array(
            
            'hotel_id' => $avalbydate['hotel_id'],
            'category_id' =>  $avalbydate['category_id'],
            'date' => $d,
            'capacity'=> $avalbydate['capacity'],
            // 'availability' => $avalbydate['rooms'],
            'base_price' => $cat['baseprice'],
            'original_price' => $cat['price'],
            'booked' => $avalbydate['booked'],

        );    
        // var_dump($params);die;
        if($aval!=0){
            $params['availability'] = $cat['no_of_rooms'] - $aval;
        }else{
            $params['availability'] = $avalbydate['rooms'];
        }
        $id=$this->Inventory_model->add_update_inventory($params);
        }elseif($avalbydate==null ){
        $params = array(
            
            'hotel_id' => $hot['id'],
            'category_id' =>  $cat['id'],
            'date' => $d,
            'capacity'=> $cat['capacity'],
            // 'availability' => $cat['no_of_rooms'],
            'base_price' => $cat['baseprice'],
            'original_price' => $cat['price'],
            'booked' => 0,
        );
        if($aval!=0){
            $params['availability'] = $cat['no_of_rooms'] - $aval;
        }else{
            $params['availability'] = $cat['no_of_rooms'];
        }
        $id=$this->Inventory_model->add_update_inventory($params);

    }
    // var_dump($params);die;

            }
        }
    }

    }


    function getinventory_for_hotel($hotel_id){
        // $query = "SELECT * FROM `inventory` WHERE hotel_id = 1 and date >= CURDATE() ";
        $query ="SELECT inventory.id as id, cast(date as date) as date,inventory.final_available,room_categories.category_name FROM `inventory` 
        INNER JOIN room_categories on  room_categories.id = inventory.category_id
        WHERE inventory.hotel_id = '".$hotel_id."' and date >= CURDATE()";
        return $this->db->query($query)->result_array();
    }

    function getEvents($id){
        $date=date('Y-m-d');
        
        $subcategory = $this->Room_category_model->get_subcategories_by_hotelid($id);
        if($subcategory!=''){
            $query = "select inventory.id,inventory.date,inventory.final_available,room_categories.category_name,sub_category.sub_name
            from inventory 
            inner join room_categories on room_categories.id= inventory.category_id 
            join  sub_category on sub_category.id= inventory.sub_category_id 
            where inventory.hotel_id = '".$id."' and date >= '".$date. "'";
                $result =$this->db->query($query)->result_array();
                foreach($result as $res){
                    $title= $res['sub_name'].":".$res['final_available'];
                    $phpdate = strtotime( $res['date'] );
                    $mysqldate = date( 'Y-m-d', $phpdate );
                    $event_array[] = array(
                        'id' => $res['id'],
                        'title' =>$title ,
                        'start' => $mysqldate,
                        'end' => $mysqldate,
                    );
                }

        }
        $query = "select inventory.id,inventory.date,inventory.final_available,room_categories.category_name
        from inventory 
        inner join room_categories on room_categories.id= inventory.category_id 
        where inventory.hotel_id = '".$id."' and date >= '".$date. "' and sub_category_id is NULL";
       
         
       $result =$this->db->query($query)->result_array();    
        foreach($result as $res){
            $title= $res['category_name'].":".$res['final_available'];
            $phpdate = strtotime( $res['date'] );
            $mysqldate = date( 'Y-m-d', $phpdate );
            $event_array[] = array(
                'id' => $res['id'],
                'title' =>$title ,
                'start' => $mysqldate,
                'end' => $mysqldate,
            );
        }
        return json_encode($event_array);
        // var_dump($event_array);
        // if($event_array!=null){
        //     $event_array['status']= 'succcess';
        //     var_dump($event_array)
        //     return json_encode($event_array);
        // }else{
        //     $event_array['status']= 'failed';
        //     $event_array['inventory']= 'room categories are not created at';
        //     return json_encode($event_array);
        // }

      
    }
     public function getinventorybydateandhotel($date,$hotel_id){
        $subcategory = $this->Room_category_model->get_subcategories_by_hotelid($hotel_id);
        if($subcategory!= '') {
        $this->db->select('i.*,rm.category_name ,sc.sub_name ,');
        $this->db->from('inventory i');
        $this->db->join('room_categories rm', 'rm.id = i.category_id','left');
        $this->db->join('sub_category sc', 'sc.id = i.sub_category_id','left');
        $this->db->where('i.date',$date);
        $this->db->where('i.hotel_id',$hotel_id);
        $this->db->where('sub_category_id is NOT NULL'); 
        $result1=$this->db->get()->result_array();
        } 
        $this->db->select('i.*,rm.category_name ');
        $this->db->from('inventory i');
        $this->db->join('room_categories rm', 'rm.id = i.category_id','left');
        $this->db->where('i.date',$date);
        $this->db->where(['i.hotel_id'=>$hotel_id]);
        $this->db->where('sub_category_id is NULL');   

        $result2=$this->db->get()->result_array();
        $result = array_merge($result1, $result2);      
        
        return $result;

    }

    public function getrowbyid($id){
        $this->db->where('id',$id);
      return  $this->db->get('inventory')->row_array();
        
    }
     
    public function get_max_value(){
        $query = "select max(original_price) as max from inventory";
       $result= $this->db->query($query)->row_array();
        return $result;
    }
    public function get_min_value(){
        $query = "select min(original_price) as min from inventory";
       $result= $this->db->query($query)->row_array();
        return $result;
    }
}