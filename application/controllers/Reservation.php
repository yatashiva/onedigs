<?php
require_once(APPPATH."libraries/lib/config_paytm.php");
require_once(APPPATH."libraries/lib/encdec_paytm.php");
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Reservation extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->library('email');
        $this->load->model('Reservation_model');
        $this->load->model('Taxes_model');
        $this->load->model('Inventory_model');
        $this->load->model('Hotel_model');
        $this->load->model('Room_category_model');
        $this->load->model('Amenity_model');
        $this->load->model('Cancellation_model');
        $this->load->model('Margin_model');
        $this->load->model('Payment_detail_model');

        
    } 

    /*
     * Listing of reservations
     */
    function index()
    {
         if(isset($_POST) && count($_POST) > 0)     
            {  
            $params=array( 
                'from'=>$this->input->post('from'),
                'to'=>$this->input->post('to'),
                'category'=>$this->input->post('category'),
                'location'=>$this->input->post('location'),
                'booking_id'=>$this->input->post('booking_id')
                );
             if($this->session->userdata('is_logged_in'))
                {
                    if($this->session->userdata('user_type')==1)
{
               $data['reservations']=$this->Reservation_model->get_rerservation_by_serach($params);
           }
            elseif($this->session->userdata('user_type')==2)
    {
        $id=$this->session->userdata('login_id');
        $data['reservations']=$this->Reservation_model->get_rerservation_by_serach($params,$id);
    }
}
               $data['from']=$params['from'];
               $data['to']=$params['to'];
               $data['category']=$params['category'];
               $data['booking_id']=$params['booking_id'];
               $data['location']=$params['location'];

            
            }
            else
            {
                if($this->session->userdata('is_logged_in'))
                {
                    if($this->session->userdata('user_type')==1)
{
        $data['reservations'] = $this->Reservation_model->get_all_reservations();
    }
    elseif($this->session->userdata('user_type')==2)
    {
        $id=$this->session->userdata('login_id');
        $data['reservations']=$this->Reservation_model->get_all_reservations($id);

    }
    
        }
    }
       $data['_view'] = 'reservation/index';
       $this->load->view('admin/index',$data);
    
}

    /*
     * Adding a new reservation
     */
    
   

   

    // function add($hotel_id,$category_id,$daterange,$rooms)
    // {   
    //     $date=explode('to',$daterange);
    //      $result = array();
    //     $date1 = substr($daterange,0,10);
    //      $date2 = substr($daterange,11,20);
    
    // for($i = 0, $len = strlen($rooms); $i < $len; $i++) {
    //     if(is_numeric($rooms[$i])) {
    //         $result[] = $rooms[$i];
    //     }
    // }
     
    //  $price = $this->Room_category_model->get_price($category_id);
     
    //         $params = array(
				// 'reservation_id' => $this->input->post('reservation_id'),
				// 'hotel_id' => $hotel_id,
				// 'category_id' => $category_id,
				// // 'room_id' => $this->input->post('room_id'),
				// 'no_of_rooms' => $result[0],
				// 'no_of_persons' => $result[1],
				// 'check_in' => $date1,
				// 'check_out' => $date2,
				// 'price' => $price['price'],
				// 'tax' => "100",
				// 'total_price' => "1600",
				// 'payment_type' => "online",
				// //'user_id' => $this->input->post('user_id'),
    //             'booking_status' => "pending",
				// // 'created_at' => $this->input->post('created_at'),
				// // 'updated_at' => $this->input->post('updated_at'),
    //         );
            
    //         $reservation_id = $this->Reservation_model->add_reservation($params);
    //         if(isset($reservation_id))     
    //             {
    //                 $param = array(
    //             'booking_id' => $reservation_id,
    //             'hotel_id' => $hotel_id,
    //             'category_id' => $category_id,
               
    //         );

    //                 $booked['details'] = $this->Reservation_model->booked_hotel($param);
    //                 $booked['amenities']=$this->Amenity_model->get_all_amenities();
    //                 $booked['booking']=array("booking_id"=>$reservation_id);
    //                 $this->load->view('frontend/booking2',$booked);
    //             }


    //         else{
    //         echo json_encode ($params);
    //         $this->load->view('frontend/booking2',$booked);
    //             }
    //     }
    
    function add($hotel_id,$daterange,$category_id, $sub_category_id, $rooms,$adults,$children=0, $exBdCnt=0)
    { 
		$daterange = str_replace('%20',' ',$daterange); 
		$ex=explode(' - ',$daterange);
			$date1 = $ex[0];
			 $date2 = $ex[1];
			$no_of_days=(strtotime($date2)-strtotime($date1))/(24*60*60);

		// for($i = 0, $len = strlen($rooms); $i < $len; $i++) {
		//     if(is_numeric($rooms[$i])) {
		//         $result[] = $rooms[$i];
		//     }
		// }

		if($sub_category_id==0)
		 {
			// $price1="";
			  $price1 = $this->Room_category_model->get_room_catgory($category_id);
		 $price = $this->Room_category_model->get_price($category_id);
		 $gallery=$this->Hotel_model->get_category_pic($hotel_id,$category_id);
	 }
	 else
	 {
		 $price1 = $this->Hotel_model->getSubcost($sub_category_id);
		$price = $this->Hotel_model->getSubcost($sub_category_id);
		 $gallery=$this->Hotel_model->get_sub_pic($hotel_id,$category_id,$sub_category_id);
	 }
		 // // var_dump($price);die;
		 // $amount=($result[0] * $result[1] * $price['price'])*$no_of_days;
	 // $amount=($rooms * $adults * $price['price'])*$no_of_days;
	 
	 
	 
	 if($adults == $rooms){
			$amount = $rooms * $price['price'] * $no_of_days;
					if(isset($exBdCnt))
					{
					$amount = $amount + ((int)$exBdCnt * $price['extra_bed_price'] * $no_of_days);
					}
	 }else if($adults > $rooms ) {
		if(($adults%$rooms) == 0){

			$amount = $rooms * ($price['price'] + $price['double_price'] ) * $no_of_days;
					if(isset($exBdCnt))
					{
					$amount = $amount + ((int)$exBdCnt * $price['extra_bed_price'] * $no_of_days);
					}
		}else if( ($adults%$rooms) != 0 ){
			$amount = $rooms *  $price['price'] * $no_of_days;
			$reminder = (int)($adults%$rooms);
			$amount = $amount + ($reminder * $price['double_price'] * $no_of_days);
				if(isset($exBdCnt))
					{
					$amount = $amount + ((int)$exBdCnt * $price['extra_bed_price'] * $no_of_days);
					}
			}
 }
    
 
    
    


//  $capacity=2;
// if($adults == (($capacity + 1 ) * $rooms))
// {
//     $amount=($price['price'] + $price['extra_bed_price']+ $price['double_price']) *$no_of_days *$rooms;
// }
// elseif($adults < (($capacity + 1) * $rooms) && $adults > ($capacity * $rooms) )
// {
//     $extra=($adults-($capacity * $rooms));
//      $amount=(($price['price'] *$rooms )+ (($price['extra_bed_price']+ $price['double_price']) * $extra)) *$no_of_days ;


// }
// else
// {


//  $amount=($rooms * $price['price'])*$no_of_days;
// }
     $get_tax=$this->Taxes_model->get_taxpercent($amount);
     $total_tax=0;
     // $tax=($get_tax['tax']*$amount)/100;
//      foreach($get_tax as $tax)
//  {
    if($get_tax['tax'])
    {
        $tax1=($amount*$get_tax['tax'])/100;
        $total_tax= (int)$total_tax+ (int)$tax1;
    }
//  }

     $total_amount=($amount+$total_tax);
    
    
            $params = array(
                'reservation_id' => $this->input->post('reservation_id'),
                'hotel_id' => $hotel_id,
                'category_id' => $category_id,
                'sub_category_id' => $sub_category_id,
                'no_of_rooms' => $rooms,
                'no_of_persons' => $adults,
                'check_in' => $date1,
                'check_out' => $date2,
                'price' => $amount,
                'tax' => $total_tax,
                'total_price' => $total_amount,
                'payment_type' => "online",
                //'user_id' => $this->input->post('user_id'),
                'booking_status' => "pending",
                'no_of_days' => $no_of_days
                // 'created_at' => $this->input->post('created_at'),
                // 'updated_at' => $this->input->post('updated_at'),
            );
            // $reservation_id = $this->Reservation_model->add_reservation($params);
            // if(isset($reservation_id))     
            //     {
            //         $param = array(
            //     'booking_id' => $reservation_id,
            //     'hotel_id' => $hotel_id,
            //     'category_id' => $category_id,
               
            // );

                    // $booked['details'] = $this->Reservation_model->booked_hotel($param);
                    $booked['hoteldetails'] = $this->Hotel_model->get_hotel($hotel_id);
                    $booked['roomdetails'] = $this->Room_category_model->get_room_category($hotel_id);
                    
                    $booked['details'] = $params;
                    $booked['amenities']=$this->Amenity_model->get_all_amenities();
                    $booked['policy']=$this->Cancellation_model->get_cancellation($hotel_id);
                    $booked['sub']=$price1;
                      $booked['image']=$gallery;
                    // var_dump($booked);die;
                    // $booked['booking']=array("booking_id"=>$reservation_id);
                    // print_r($booked);
                    // die();
                    $this->load->view('frontend/booking2',$booked);
                


            
        }
    
    

    /*
     * Editing a reservation
     */
    function edit($id)
    {   
        // check if the reservation exists before trying to edit it
        $data['reservation'] = $this->Reservation_model->get_reservation($id);
        
        if(isset($data['reservation']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					
                    'booking_status' => "in payment",
                    'guest_name' => $this->input->post('guest_name'),
					// 'created_at' => $this->input->post('created_at'),
					// 'updated_at' => $this->input->post('updated_at'),
                );

                $this->Reservation_model->update_reservation($id,$params);   
                $data['reservation'] = $this->Reservation_model->get_reservation($id); 
                // echo json_encode ($data);      

                $booked1['details'] = $this->Reservation_model->booked_hotel2($data);
                   // echo json_encode ($booked1);  
                // redirect('reservation/index');
                $this->load->view('frontend/payment3',$booked1);
            }
            else
            {
                // $data['_view'] = 'reservation/edit';
                // $this->load->view('layouts/main',$data);
                 $this->load->view('frontend/index');
            }
        }
        else
            show_error('The reservation you are trying to edit does not exist.');
    } 

    /*
     * Deleting reservation
     */
    function remove($id)
    {
        $reservation = $this->Reservation_model->get_reservation($id);

        // check if the reservation exists before trying to delete it
        if(isset($reservation['id']))
        {
            $this->Reservation_model->delete_reservation($id);
            redirect('reservation/index');
        }
        else
            show_error('The reservation you are trying to delete does not exist.');
    }
    


function create()
    {   

            if(isset($_POST) && count($_POST) > 0)     
            { 
// print_r($_POST);
// die;

                $characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                $charactersLength = strlen($characters);
                $randomString = '';
                for ($i = 0; $i < 6; $i++) {
                    $randomString .= $characters[rand(0, $charactersLength - 1)];
                }
                extract($this->input->post());
               
                
                $guest_name=implode(',',$this->input->post('guest_name'));
                $guest_email=implode(',',$this->input->post('email'));
                $guest_numbers=implode(',',$this->input->post('mobile'));
              
                // echo $guest_name;
                // echo $guest_email;
                // die();
                // echo $guest_numbers;
                $gst_number=$this->input->post('gst_num');
                if(isset($gst_number))
                {
$business=array(
    'booking_id'=>$randomString,
    'gst_number'=>$gst_num,
    'company_name'=>$company_name,
    'company_email'=>$business_mail,
    'company_address'=>$company_add,
    'company_mobile'=>$phone_num,
    'country'=>$country,
    'state'=>$state
    );
$booking_type="Business";
$this->load->model('Hotel_model');
$this->Hotel_model->add_business($business);
}
else
{
    $booking_type="Personal";
}
$margin=$this->Margin_model->get_margin_by_hotel($hotel_id);
// print_r($margin);
// die;
$hotel_margin=($price * $margin['percentage'] )/100;


              
                $params = array(
                'reservation_id' => $randomString,
                'hotel_id' => $hotel_id,
                'category_id' => $category_id,
                'sub_category_id'=>$sub_category_id,
                'no_of_rooms' => $no_of_rooms,
                'no_of_persons' => $no_of_persons,
                'check_in' => $check_in,
                'check_out' => $check_out,
                'price' => $price,
                'tax' => $tax,
                'total_price' => $total_price,
                'hotel_margin'=>$hotel_margin,
                'payment_type' => $online_payment,
                'user_id' => $user_id,
                'guest_name' => $guest_name,  
                'guest_email'=>$guest_email,
                'guest_numbers'=>$guest_numbers,              
                'booking_status' => "booked",
                'booking_type'=>$booking_type
               
            );
                if($online_payment=="online_payment")
                {
 $params = array(
                'reservation_id' => $randomString,
                'hotel_id' => $hotel_id,
                'category_id' => $category_id,
                'sub_category_id'=>$sub_category_id,
                'no_of_rooms' => $no_of_rooms,
                'no_of_persons' => $no_of_persons,
                'check_in' => $check_in,
                'check_out' => $check_out,
                'price' => $price,
                'tax' => $tax,
                'total_price' => $total_price,
                'hotel_margin'=>$hotel_margin,
                'payment_type' => $online_payment,
                'user_id' => $user_id,
                'guest_name' => $guest_name,  
                'guest_email'=>$guest_email,
                'guest_numbers'=>$guest_numbers,              
                'booking_status' => "pending",
                'booking_type'=>$booking_type
               
            );
 $reservation_id = $this->Reservation_model->add_reservation($params);
   $orderId = $reservation_id; /// must be unique

     $this->StartPayment($reservation_id);


                }
                else
                {

                    $reservation_id = $this->Reservation_model->add_reservation($params);
                     $reser = $this->Reservation_model->get_reservation($reservation_id);
                       $book= $this->Hotel_model->get_hotel($hotel_id); 
                       $address=explode(',', $book['hotel_address']);
                       $address=implode('+', $address);
                       $address = preg_replace('/\s+/', '+', $address);
                       $mapAdd = "http://maps.google.com/maps?saddr=My+Location&daddr=".$address;
                       $message="Booking No-".$reser['reservation_id'].", Name:".$guest_name." is confirmed for hotel ".$book['hotel_name']. " from -".$check_in. " to -".$check_out ." in ". $no_of_rooms. " room(s) for ". $no_of_persons. " Guest(s). "."Link for directions:".$mapAdd;
                       $this->sendotp($message,$guest_numbers);
   
                      
                     

//SMTP & mail configuration
$config = array(
    'protocol'  => 'smtp',
    'smtp_host' => 'ssl://smtp.googlemail.com',
    'smtp_port' => 465,
    'smtp_user' => 'olakiteapps@gmail.com',
    'smtp_pass' => 'Welcome@123',
    'mailtype'  => 'html',
    'charset'   => 'utf-8'
);


$this->email->initialize($config);
$this->email->set_mailtype("html");
$this->email->set_newline("\r\n");

$messageEmail="Hi,<br><br>Below are the booking details for Nohorooms.com:<br>"."Booking No-".$reser['reservation_id']."<br>Guest Name:".$guest_name."<br>Hotel: ".$book['hotel_name']."<br>Checkin time: ".$check_in."<br>Checkout Time: ".$check_out ."<br>No of Rooms: ".$no_of_rooms."<br>No of Guests: ".$no_of_persons."<br><br>Link for directions:".$mapAdd;


$this->email->to($guest_email);
$this->email->from('olakiteapps@gmail.com','Hotel Booking Portal');
$this->email->subject('Booking Confirmation, nohorooms.com');
$this->email->message($messageEmail);

//Send email
$this->email->send();

$begin = new DateTime($check_in);
$end = new DateTime($check_out);

$interval = DateInterval::createFromDateString('1 day');
$period = new DatePeriod($begin, $interval, $end);

foreach ($period as $dt) {
    $date=$dt->format("Y-m-d");
// print_r($dt->format("Y-m-d"));
                    $booked_rooms=$this->Inventory_model->get_inventory_hotel_category($hotel_id,$category_id,$sub_category_id,$date);
                    // print_r($booked_rooms);
                    $booked=$booked_rooms['booked']+ $no_of_rooms;
                    // echo $booked;
                    // $params1=array('booked'=>$booked);
                    $res=$this->Inventory_model->update_booked($hotel_id,$category_id,$sub_category_id,$booked,$date);
                    // print_r($res);
                }

                    redirect('/reservation/booked_details/'.$reservation_id);
                }
            }
        }


        public function booked_details($id){

                    $booked['reservationdetails'] = $this->Reservation_model->get_reservation($id);
                    $hotel_id = $booked['reservationdetails']['hotel_id'];
                     $sub_id = $booked['reservationdetails']['sub_category_id'];
                     $category_id=$booked['reservationdetails']['category_id'];
                    $booked['hoteldetails'] = $this->Hotel_model->get_hotel($hotel_id);
                    $booked['cancellation']=$this->Hotel_model->get_cancellation_policies($hotel_id);
                    $booked['roomdetails'] = $this->Room_category_model->get_room_category($category_id);
                    $booked['amenities']=$this->Amenity_model->get_all_amenities();
                    $booked['sub']=$this->Hotel_model->getsubcost($sub_id);
                    $booked['booking']=array("booking_id"=>$id);
                    $date1 = $booked['reservationdetails']['check_in'];
                    $date2 = $booked['reservationdetails']['check_out'];
                    $no_of_days=(strtotime($date2)-strtotime($date1))/(24*60*60);
                    $booked['no_of_days']=$no_of_days;
                    // print_r($booked);
                    // die;

                    $this->load->view('frontend/payment3',$booked);

        }
        
             function cancel_booking($id)
    {   
       
        $data['reservation'] = $this->Reservation_model->get_reservation($id);
       
        if(isset($data['reservation']['id']))
        {
              
        
        
                $params = array(
                    
                    'booking_status' => "cancelled",
                   
                );

                
                 $this->Reservation_model->update_reservation($id,$params); 
                  $book= $this->Hotel_model->get_hotel($data['reservation']['hotel_id']);
                  $message="Booking No-".$data['reservation']['reservation_id']." is cancelled for hotel ".$book['hotel_name']. " from -".date('d-m-Y',strtotime($data['reservation']['check_in'])). " to -". date('d-m-Y',strtotime($data['reservation']['check_out'])) ." ";
                    $this->sendotp($message,$data['reservation']['guest_numbers']);
                 $begin = new DateTime($data['reservation']['check_in']);
$end = new DateTime($data['reservation']['check_out']);

$interval = DateInterval::createFromDateString('1 day');
$period = new DatePeriod($begin, $interval, $end);

foreach ($period as $dt) {
    $date=$dt->format("Y-m-d");
// print_r($dt->format("Y-m-d"));
                    $booked_rooms=$this->Inventory_model->get_inventory_hotel_category($data['reservation']['hotel_id'],$data['reservation']['category_id'],$data['reservation']['sub_category_id'],$date);
                    // print_r($booked_rooms);
                    $booked=$booked_rooms['booked']- $data['reservation']['no_of_rooms'];
                    // echo $booked;
                    // $params1=array('booked'=>$booked);
                    $res=$this->Inventory_model->update_booked($data['reservation']['hotel_id'],$data['reservation']['category_id'],$data['reservation']['sub_category_id'],$booked,$date);
                    // print_r($res);
                }
                // // $data['reservations'] = $this->Reservation_model->get_all_reservations(); 
                                
               // $this->load->view('reservation/index.php');
               redirect('/reservation/index');
            
           
        }
        else
            show_error('The reservation you are trying to delete does not exist.');
    }
	
	    function reservations_by_agent()
    {
         if(isset($_POST) && count($_POST) > 0)     
            {  
            $params=array( 
                'from'=>$this->input->post('from'),
                'to'=>$this->input->post('to'),
                'category'=>$this->input->post('category'),
                'booking_id'=>$this->input->post('booking_id')
                );
             
               $data['reservations']=$this->Reservation_model->get_rerservation_by_serach($params);
               $data['from']=$params['from'];
               $data['to']=$params['to'];
               $data['category']=$params['category'];
               $data['booking_id']=$params['booking_id'];

            
            }
            else
            {
        $data['reservations'] = $this->Reservation_model->reservations_by_agent();
		// var_dump($data['reservations']);die;
    
        }
       $data['_view'] = 'reservation/index';
       $this->load->view('admin/index',$data);
    
}
function sendotp($msg,$email)
{
     // $otp = rand(100001, 999999);
     $username = 'faceone';
  $password = 'Salu';
  // $to ='7675021368';
  $from = 'OLAKTE';
  // $message = 'Please Enter the following otp for Login :'.$otp;
  $url = "http://sms.scubedigi.com/api.php?username=".$username."&password=".$password."&to=".$email."&from=".urlencode($from)."&message=".urlencode($msg)."";
//Curl Start
  // $ch  =  curl_init();
 // $response = curl($url); 
 $ch  =  curl_init();
 // $timeout  =  30;
 curl_setopt ($ch,CURLOPT_URL, $url) ;
 curl_setopt ($ch,CURLOPT_RETURNTRANSFER, true);
 // curl_setopt ($ch,CURLOPT_CONNECTTIMEOUT, $timeout) ;
 $response = curl_exec($ch) ;
 curl_close($ch) ; 
 //Write out the response
 // die($response);
}
public function StartPayment($orderId)
    {
        $reser = $this->Reservation_model->get_reservation($orderId);
        // print_r($reser);
        // die;
        $paramList["MID"] = PAYTM_MERCHANT_MID;
        $paramList["ORDER_ID"] = $orderId;        
        $paramList["CUST_ID"] =$reser['user_id'];   /// according to your logic
        $paramList["INDUSTRY_TYPE_ID"] = 'RETAIL';
        $paramList["CHANNEL_ID"] = 'WEB';
        $paramList["TXN_AMOUNT"] = $reser['total_price'];
        $paramList["WEBSITE"] = PAYTM_MERCHANT_WEBSITE;
      
        $paramList["CALLBACK_URL"] = "https://olakite.com/index.php/reservation/PaytmResponse";
        $paramList["MSISDN"] = $reser['guest_numbers']; //Mobile number of customer
        $paramList["EMAIL"] =$reser['guest_email'];;
        $paramList["VERIFIED_BY"] = "EMAIL"; //
        $paramList["IS_USER_VERIFIED"] = "YES"; //
      //  print_r($paramList);
        $checkSum = getChecksumFromArray($paramList,PAYTM_MERCHANT_KEY);

       ?>

        <!--submit form to payment gateway OR in api environment you can pass this form data-->
      
        <form id="myForm" action="<?php echo PAYTM_TXN_URL ?>" method="post">
        <?php
         foreach ($paramList as $a => $b) {
        echo '<input type="hidden" name="'.htmlentities($a).'" value="'.htmlentities($b).'">';
       }
       ?>
            <input type="hidden" name="CHECKSUMHASH" value="<?php echo $checkSum ?>">
        </form>
        <script type="text/javascript">
            document.getElementById('myForm').submit();
         </script>
    
<?php
    }

  
    /////////// response from paytm gateway////////////
    public function PaytmResponse()
    {
        $paytmChecksum = "";
        $paramList = array();
        $isValidChecksum = "FALSE";

        $paramList = $_POST;
        // echo "<pre>";
        // print_r($paramList);
      
       $paytmChecksum = isset($_POST["CHECKSUMHASH"]) ? $_POST["CHECKSUMHASH"] : ""; //Sent by Paytm pg

       $isValidChecksum = verifychecksum_e($paramList, PAYTM_MERCHANT_KEY, $paytmChecksum); //will return TRUE or FALSE string.

       if($isValidChecksum == "TRUE")
       {
           if ($_POST["STATUS"] == "TXN_SUCCESS")
           { /// put your to save into the database // tansaction successfull
               var_dump($paramList);

                $params = array(
                    
                    'booking_status' => "booked",
                   
                );

                
                 $this->Reservation_model->update_reservation($paramList['ORDERID'],$params);
                  $reser = $this->Reservation_model->get_reservation($paramList['ORDERID']);
                 $book= $this->Hotel_model->get_hotel($reser['hotel_id']);
                    $message="Booking No-".$reser['reservation_id'].", Name:".$reser['guest_name']." is confirmed for hotel ".$book['hotel_name']. " from -".$reser['check_in']. " to -".$reser['check_out'] ." in ". $reser['no_of_rooms']. " room(s) for ". $reser['no_of_persons']. " Guest(s)";
                    // $this->sendotp($message,$reser['guest_numbers']);


$begin = new DateTime($reser['check_in']);
$end = new DateTime($reser['check_out']);

$interval = DateInterval::createFromDateString('1 day');
$period = new DatePeriod($begin, $interval, $end);

foreach ($period as $dt) {
    $date=$dt->format("Y-m-d");
// print_r($dt->format("Y-m-d"));
                    $booked_rooms=$this->Inventory_model->get_inventory_hotel_category($reser['hotel_id'],$reser['category_id'],$reser['sub_category_id'],$date);
                    // print_r($booked_rooms);
                    $booked=$booked_rooms['booked']+ $reser['no_of_rooms'];
                    // echo $booked;
                    // $params1=array('booked'=>$booked);
                    $res=$this->Inventory_model->update_booked($reser['hotel_id'],$reser['category_id'],$reser['sub_category_id'],$booked,$date);
                    // print_r($res);


                    $payment_details=array('reference_id' =>$paramList['TXNID'],'reservation_id' =>$paramList['ORDERID'],'payment_mode' =>'Online','amount_paid'=>$paramList['TXNAMOUNT'],'paid_date' =>$paramList['TXNDATE'] );
                    $this->Payment_detail_model->add_payment_detail($payment_details);

                }

                   redirect('/reservation/booked_details/'.$paramList['ORDERID']); 

           }
           else {/// failed
               var_dump($paramList);
           }
       }else
       {//////////////suspicious
          // put your code here
         
       }
    }
}




