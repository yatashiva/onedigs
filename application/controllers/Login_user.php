<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Login_user extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Login_user_model');
        $this->load->model('User_detail_model');
        $this->load->model('Vendor_detail_model');
        $this->load->model('User_type_model');  
        $this->load->model('Reservation_model'); 
        $this->load->helper('cookie');  
        $this->load->library('email');
        //error_reporting(E_ALL);
    } 

    /*
     * Listing of login_users
     */
    function index()
    {
        $data['login_users'] = $this->Login_user_model->get_all_login_users();
        
        $data['_view'] = 'login_user/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new login_user
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
                'password' => $this->input->post('password'),
                'password_reset' => $this->input->post('password_reset'),
                'username' => $this->input->post('username'),
                'email' => $this->input->post('email'),
                'phone_no' => $this->input->post('phone_no'),
                'user_type' => $this->input->post('user_type'),
                'access_token' => $this->input->post('access_token'),
                'gcm_id' => $this->input->post('gcm_id'),
                'status' => $this->input->post('status'),
                'created_at' => $this->input->post('created_at'),
                'updated_at' => $this->input->post('updated_at'),
                'last_login' => $this->input->post('last_login'),
            );
            
            $login_user_id = $this->Login_user_model->add_login_user($params);
            redirect('login_user/index');
        }
        else
        {            
            $data['_view'] = 'login_user/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a login_user
     */
    function edit($id)
    {   
        // check if the login_user exists before trying to edit it
        $data['login_user'] = $this->Login_user_model->get_login_user($id);
        
        if(isset($data['login_user']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
                    'password' => $this->input->post('password'),
                    'password_reset' => $this->input->post('password_reset'),
                    'username' => $this->input->post('username'),
                    'email' => $this->input->post('email'),
                    'phone_no' => $this->input->post('phone_no'),
                    'user_type' => $this->input->post('user_type'),
                    'access_token' => $this->input->post('access_token'),
                    'gcm_id' => $this->input->post('gcm_id'),
                    'status' => $this->input->post('status'),
                    'created_at' => $this->input->post('created_at'),
                    'updated_at' => $this->input->post('updated_at'),
                    'last_login' => $this->input->post('last_login'),
                );

                $this->Login_user_model->update_login_user($id,$params);            
                redirect('login_user/index');
            }
            else
            {
                $data['_view'] = 'login_user/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The login_user you are trying to edit does not exist.');
    } 

    /*
     * Deleting login_user
     */
    function remove($id)
    {
        $login_user = $this->Login_user_model->get_login_user($id);

        // check if the login_user exists before trying to delete it
        if(isset($login_user['id']))
        {
            $this->Login_user_model->delete_login_user($id);
            redirect('login_user/index');
        }
        else
            show_error('The login_user you are trying to delete does not exist.');
    }

    function  create(){

        if(isset($_POST) && count($_POST) > 0)  
        {
            extract($this->input->post());
            if($user_type ==3){

                $loginparams= array(
                    'password' => md5($password),
                    'username' => $name,
                    'email' => $email,
                    'phone_no' => $phone_no,
                    'user_type' => $user_type,
                    'status' => 1,
                );
                $id = $this->Login_user_model->add_login_user($loginparams);
                $userparams= array(
                'login_id' => $id,
                'name' => $name,
                'phone_no' => $phone_no,
                'email' => $email,
                'address' => $address,
                );
                $user_detail_id = $this->User_detail_model->add_user_detail($params);
                // redirect('user_detail/index');
            }

            if($user_type ==2){

                $loginparams= array(
                    'password' => md5($password),
                    'username' => $name,
                    'email' => $email,
                    'phone_no' => $phone_no,
                    'user_type' => $user_type,
                    'status' => 1,
                );
                $id = $this->Login_user_model->add_login_user($loginparams);
                $userparams= array(
                'business_name' => $business_name,
                'login_id' => $id,
                'name' => $name,
                'phone_no' => $phone_no,
                'email' => $email,
                'address' => $address,
                );
                $vendor_detail_id = $this->Vendor_detail_model->add_vendor_detail($params);
                // redirect('user_detail/index');
            }

        }

    }
    

    public function login(){
        if(isset($_POST) && count($_POST) > 0)  
        {
            extract($this->input->post());
// print_r($this->input->post());
// die;

            
if (isset($remember)) {
     $cookie= array(
 
           'name'   => 'email',
 
           'value'  => $email,
 
           'expire' => time()+3600,
 
       );
  $cookie2= array(
 
           'name'   => 'password',
 
           'value'  => $password,
 
           'expire' => time()+3600,
 
       );
  $this->input->set_cookie($cookie);
  $this->input->set_cookie($cookie2);
  // $this->input->set_cookie($cookie);
  //      $this->input->set_cookie($cookie2);
    // setcookie('email',$email,time()+(86400*30),"/");
    // setcookie('password',$password,time()+(86400*30),"/");

}
else
{
    //  setcookie('email','',time()-3600);
    // setcookie('password','',time()-3600);
    $cookie= array(
 
           'name'   => 'email',
 
           'value'  => '',
 
           'expire' => time()- 3600,
 
       );
  $cookie2= array(
 
           'name'   => 'password',
 
           'value'  => '',
 
           'expire' => time()-3600,
 
       );
  $this->input->set_cookie($cookie);
  $this->input->set_cookie($cookie2);
}

//  echo $this->input->cookie('email',true);
//  echo $this->input->cookie('password',true);
// die;
$loginparams = array(
            'email' => $email,
            'password' => md5($password)
            );
            $result = $this->Login_user_model->login($loginparams);
            // print_r($result);
            // print_r($loginparams);
            // echo "hi";
            // die;
            
            if($result!=null && $result['user_type']==1){
                $data = array(
                    // 'user_name' => $user_name,
                    'login_id' => $result['id'],
                    'user_type' =>$result['user_type'],
                    'is_logged_in' => true

                );
                $this->session->set_userdata($data);
                redirect('admin/dashboard');
            }
                elseif($result!=null && $result['user_type']==2){
                $data = array(
                    // 'user_name' => $user_name,
                    'login_id' => $result['id'],
                    'user_type' =>$result['user_type'],
                    'is_logged_in' => true
                );
                $this->session->set_userdata($data);
                redirect('admin/dashboard');
            }
            elseif($result!=null && $result['user_type']==4){
                $data = array(
                    // 'user_name' => $user_name,
                    'login_id' => $result['id'],
                    'user_type' =>$result['user_type'],
                    'is_logged_in' => true
                );
                $this->session->set_userdata($data);
                redirect('admin/dashboard');
            }
            
            
            else{
                $this->load->view('admin/login');
            }
        }else{
            $this->load->view('admin/login');
        }
    }

    public function checkotp(){
        if(isset($_POST) && count($_POST) > 0)  
        {
            extract($this->input->post());
            if($email!=''||$email!=null){
            $loginparams = array(
                'email' => $email,
                'otp' =>$otp
            );
            $result = $this->Login_user_model->login($loginparams);
            $data = array(
                // 'user_name' => $user_name,
                'login_id' => $result['id'],
                'name' => $result['username'],
                'user_type' =>$result['user_type'],
                'is_logged_in' => true
            );
            if(!empty($result))
            {
            $this->session->set_userdata($data);
            echo "success";
        }

        }elseif($phone_no!=''||$phone_no!=null){
            // var_dump($phone_no);
            // var_dump($otp);
            // die;
            
            $loginparams = array(
                'phone_no' => $phone_no,
                'otp' =>$otp
            );
            $result = $this->Login_user_model->login($loginparams);
            $data = array(
                // 'user_name' => $user_name,
                'login_id' => $result['id'],
                'name' => $result['username'],                
                'user_type' =>$result['user_type'],
                'is_logged_in' => true
            );
              if(!empty($result))
            {
            $this->session->set_userdata($data);
            echo "success";
        }
            // echo "1";
        }
            
        }
    }


    public function createotp(){
        if(isset($_POST) && count($_POST) > 0)  
        {
            
         $this->load->helper('cookie');   
            extract($this->input->post());
            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $checkuser=$this->Login_user_model->checkUser_email($email);
               
                if($checkuser)
                {
                $param = array('email' => $email);
                  $data = $this->Login_user_model->login($param);
                  $otp    = rand(100001, 999999);
                  $loginp= array('otp' => $otp);
          $update= $this->Login_user_model->update_login_user($data['id'],$loginp);

//SMTP & mail configuration
/*$config = array(
    'protocol' => 'smtp',
    'smtp_host' => 'smtp.hostinger.com',
    'smtp_port' => 465,
    'smtp_user' => 'noreply@olakite.com',
    'smtp_pass' => 'Welcome@123',
    'mailtype' => 'html',
    'charset' => 'utf-8'
);

$this->email->initialize($config);
$this->email->set_mailtype("html");
$this->email->set_newline("\r\n");

//Email content
// $htmlContent = 'Hi there!<br>'.'<br>'."This are the booking detail:".'<br>'.'Resend time:'.date("h:i:sa").$booking_id['booking_id'].$booking_id[0].'<br>Booking details:'.$booking_id;
$htmlContent = 'Hi there!<br>' . '<br>' . "This is the OTP for Login:" . $otp;

$this->email->to($email);
$this->email->from('noreply@olakite.com', 'Hotel Booking Portal');
$this->email->subject('OTP for login: Olakite.com');
$this->email->message($htmlContent);

echo "Send email";
$response=$this->email->send();*/
$subject='OTP for login: Olakite.com';
$email_body= 'Hi there!<br>' . '<br>' . "This is the OTP for Login:" . $otp;
 $mailstatus = $this->phpmail_nocc($email, $subject, $email_body, "html");
//print_r($mailstatus);
      }
      else
      {
         $result['error'] = "This email doesn't Exists";                
                $result['status'] ='failed';
                
                echo json_encode($result); 
                die;
      }
          
           // $message = 'Please Enter the following otp for Login :'.$otp;
           //  $this->sendmessage($email,$message);
               
            }
            else{
                $param = array('phone_no' => $email);
                  $checkuser=$this->Login_user_model->checkUser($email);
                if($checkuser)
                {
                 $data = $this->Login_user_model->login($param);
                $otp = rand(100001, 999999);
                 $loginp= array('otp' => $otp);
          $update= $this->Login_user_model->update_login_user($data['id'],$loginp);
           $message = $otp." is your OTP for logging into the olakite app -Team olakite";
          $this->sendotp($message,$email);
      }
      else
      {
          $result['error'] = "This Mobile Number doesn't Exists";                
                $result['status'] ='failed';
                
                echo json_encode($result); 
                die;
      }
            }
            // $data = $this->Login_user_model->login($param);
            // print_r($data);
            // die;

            
       
   
    if (isset($remember)) {
     $cookie= array(
 
           'name'   => 'user_name',
 
           'value'  => $email,
 
           'expire' => time()+3600,
 
       );
 
  $this->input->set_cookie($cookie);
  }
  else
  {
    $cookie= array(
 
           'name'   => 'user_name',
 
           'value'  => '',
 
           'expire' => time()-3600,
 
       );
 
  $this->input->set_cookie($cookie);

  }
   // if($user_detail_id!=null){
            // $otp = rand(100001, 999999);
         //    $otp = 123456;
         //  $loginp= array('otp' => $otp);
         // $update= $this->Login_user_model->update_login_user($id,$loginp);
  

            if($data){
              

                $result['details'] = $data;
                $result['status']="success";  
                // $this->generateotp($data['id']);
                echo json_encode($result); 
            }else{
                $result['error'] = "This email doesn't Exists";                
                $result['status'] ='failed';
                
                echo json_encode($result); 
                
            }                
        }
    }

    public function logout(){
        // var_dump("hello");die;
        $id= $this->session->userdata('user_type');
        date_default_timezone_set('Asia/Kolkata');
        $now = date('y-m-d h:i:s', time());
       
        $params = array(
            'last_login' => $now
        );
        $this->Login_user_model->update_login_user($id,$params); 
            $this->session->unset_userdata('is_logged_in');
            $this->session->unset_userdata('login_id');
            $this->session->unset_userdata('user_type');
            
           
        if($id == 1|| $id == 2 || $id==4){
            redirect('admin/index');
        }else{
            redirect('home/index');
        }
        
    }

    public function forgotpassword(){

    }

    public function changepassword(){
      
        if(isset($_POST) && count($_POST) > 0)  
        {
            // extract($this->input->post());
            $email=$this->input->post('email');
             $password=$this->input->post('password');
            $params=array(
                
                'password'=>md5($password),
                );
            $this->Login_user_model->resetPassword($email,$params);
            $this->load->view('login_user/success');
        }else{
              $data['email']=$this->input->get('email');
            $this->load->view('login_user/changepassword',$data);
        }
    }


    public function generateotp($id){

        $user_details = $this->Login_user_model->get_login_user($id);
        // if($user_detail_id!=null){
            // $otp = rand(100001, 999999);
            $otp = 123456;
          $loginp= array('otp' => $otp);
         $update= $this->Login_user_model->update_login_user($id,$loginp);

        // if($user_details['email']!=null && $update !=null){
        //     $config = Array(
        //         'protocol' => 'smtp',
        //         'smtp_host' => 'ssl://smtp.gmail.com',
        //         'smtp_port' => 465,
        //         'smtp_user' => 'srikanth456789@gmail.com',
        //         'smtp_pass' => 'Sri@2017',
        //         'mailtype'  => 'html', 
        //         'charset'   => 'iso-8859-1'
        //     );
        //     $this->load->library('email');
        //     $this->email->initialize($config);
        //     $this->email->set_newline("\r\n");
        //     $this->email->from('srikanth456789@gmail.com', 'Your Name'); 
        //     $this->email->to($user_details['email']);
        //     $this->email->subject('OTP for Login'); 
        //     $this->email->message('Please Enter the following otp for Login :'.$otp);
            
            
        //     $result = $this->email->send();
        // }
    // }
}
public function mybookings($id)
{
    $data['result']=$this->Login_user_model->mybookings($id);
   
    $this->load->view('frontend/mybookings',$data);
}
public function cancel()
{
    
     $id=$this->input->post('id');
 $params=array("booking_status" => "cancelled");
 //print_r($params);
       $this->Login_user_model->cancel($id,$params);
         $data['reservation'] = $this->Reservation_model->get_reservation($id);
         $begin = new DateTime($data['reservation']['check_in']);
$end = new DateTime($data['reservation']['check_out']);

$interval = DateInterval::createFromDateString('1 day');
$period = new DatePeriod($begin, $interval, $end);

foreach ($period as $dt) {
    $date=$dt->format("Y-m-d");
// print_r($dt->format("Y-m-d"));
                    $booked_rooms=$this->Inventory_model->get_inventory_hotel_category($data['reservation']['hotel_id'],$data['reservation']['category_id'],$data['reservation']['sub_category_id'],$date);
                    // print_r($booked_rooms);
                    $booked=$booked_rooms['booked']- $data['reservation']['no_of_rooms'];
                    // echo $booked;
                    // $params1=array('booked'=>$booked);
                    $res=$this->Inventory_model->update_booked($data['reservation']['hotel_id'],$data['reservation']['category_id'],$data['reservation']['sub_category_id'],$booked,$date);
                    // print_r($res);
                }
    
    echo "success";

}
public function profile()
{
    $id=$this->input->post('id');
    $data=$this->Login_user_model->get_login_user($id);
    print_r(json_encode($data));
}
public function forgetPassword()
{
     $this->load->helper('cookie');  
    // echo 'email'.$this->input->post('email');
    // echo $_POST['email'];
            extract($this->input->post());
            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
   // $email=$this->input->post('email');
    $user_details=$this->Login_user_model->getPassword($email);
    if($user_details != null)
    {
    $ci = get_instance();
$ci->load->library('email');
    /* $config['protocol']    = 'smtp';
        $config['smtp_host']    = 'smtp.gmail.com';
        $config['smtp_port']    = '587';
        $config['smtp_crypto'] = 'tls';
        $config['smtp_user']    = 'olakiteapps@gmail.com';
        $config['smtp_pass']    = 'Welcome@123';
        $config['charset']    = 'utf-8';
        $config['newline']    = "\r\n";
        $config['mailtype'] = 'html'; // or html
        $config['validation'] = TRUE; // bool whether to validate email or not      

        // $this->email->initialize($config);
        $ci->email->initialize($config);
*/

     
        $body="Hi,";
        $body.="<br/>";
        $body.="Please click below link to reset your password";
        $body.="<br/>";
        $body.="https://olakite.com/index.php/login_user/changepassword?email=".$email;
       
/*$ci->email->from('olakiteapps@gmail.com', 'OlaKite');
$ci->email->to($email);


$ci->email->subject('Get Password Reset Link');
$ci->email->message($body);*/
$subject='Get Password Reset Link:OLAKITE';
 $mailstatus = $this->phpmail_nocc($email, $subject, $body, "html");
if($ci->email->send())
{
    
}
 $result['data']="The reset Password link is sent to your registered mail id .Please have a check ";

}

else
{
    $result['data']="This mail is not a registered mail id ";
}
}else{
    $result['data']="Please check mail format is not valid";
}
// $result['_view']="admin/login";
print_r($result['data']);
$this->load->view('admin/login',$result);
}
function sendotp($msg,$email)
{
    $username = SMS_USERNAME;
        $password = SMS_PASSWORD;
        $from = SMS_FROM;
        $peid=SMS_PEID;
        $tempid=SMS_TEMPOTP;
        $sms_text = urlencode($msg);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, SMS_URL);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
  // $message = 'Please Enter the following otp for Login :'.$otp;http://sms.scubedigi.com/api.php
//  $url = "http://sms.scubedigi.com/api.php?username=".$username."&password=".$password."&to=".$email."&from=".urlencode($from)."&message=".urlencode($msg)."&PEID=1501667280000019636&templateid=1507161898866125474";
//Curl Start
  // $ch  =  curl_init();
 // $response = curl($url); 
  

 curl_setopt($ch, CURLOPT_POSTFIELDS, "username=" . $username . "&password=" . $password . "&to=" . $email . "&from=" . $from . "&message=" . $sms_text. "&PEID=" . $peid. "&templateid=" . $tempid);
 // $timeout  =  30;
 $response = curl_exec($ch);
       // print_r($response);
        curl_close($ch);
        return true;
// curl_close($ch) ; 
 //Write out the response
 // die($response);
}
function sendmessage($email,$msg)
{
    // $config = Array(
    //             'protocol' => 'smtp',
    //             'smtp_host' => 'ssl://smtp.gmail.com',
    //             'smtp_port' => 465,
    //             'smtp_user' => 'srikanth456789@gmail.com',
    //             'smtp_pass' => 'Sri@2017',
    //             'mailtype'  => 'html', 
    //             'charset'   => 'iso-8859-1'
    //         );
    $this->load->library('email');
    $ci = get_instance();

$config['protocol'] = "smtp";
$config['smtp_host'] = "smtp.gmail.com";
$config['smtp_port'] = '465';
$config['smtp_user'] = "olakiteapps@gmail.com"; 
$config['smtp_pass'] = "Welcome@123";
$config['charset'] = "utf-8";
$config['mailtype'] = "html";
$config['newline'] = "\r\n";

$ci->email->initialize($config);

            
          
          
            $ci->email->from('olakiteapps@gmail.com', 'OlaKite'); 
            $ci->email->to($email);
            $ci->email->subject('OTP for Login'); 
            $ci->email->message($msg);
            
            
            $result = $ci->email->send();
            return true;
         

}
function phpmail_nocc($to_email, $subject, $message, $type) {
        if ($type == "html") {   //html email        
            $mailheaders = "From:" . noreply . "\r\n" .
                    "MIME-Version:1.0\r\n" .
                    "Content-type:text/html\r\n" .
                    "Content-Transfer-Encoding:7bit\n" .
                    "Reply-To: " . noreply . "\n";
        } else {     // text email
            $mailheaders = "From:" . noreply . "\r\nMIME-Version: 1.0\r\nContent-type:" .
                    "text/plain\r\nContent-Transfer-" .
                    "Encoding: 7bit\n" .
                    "Reply-To: " . noreply . "\n";
        }

        if (mail($to_email, $subject, $message, $mailheaders)) {
            return true;
        } else {
            return false;
        }
    }
}
